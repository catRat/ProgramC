\chapter{用函数实现模块化程序设计}
通过前几章的学习，已经能够编写一些简单的C程序了，的那是如果程序的功能比较多，规模比较大，把所有的程序代码都写在一个主函数中，就会使主函数变得庞杂。此外，有时程序中要多次失信啊某一功能，就需要多次重复编写此功能的程序代码。

因此，人们自然会想到采用“组装”的方法来简化程序设计的过程。如同组装计算机一样。这就是模块化程序设计的思路。

在设计一个较大的程序时，往往把它分为若干个程序模块，每一个模块包括一个或多个函数，每个函数实现一个特定的功能。一个C程序可由一个主函数和若干个其他函数构成。由主函数调用其他函数，其他函数也可以相互调用。
\section{怎样定义函数}
\subsection{为什么要定义函数}
C语言要求，在程序汇总用到的所有函数，必须“先定义，后使用”。

定义函数应包括一下几个内容：
\subsection{定义函数的方法}
\section{调用函数}
定义函数的目的是为了调用此函数，以得到预期的结果。因此，应当熟练掌握调用函数的方法和有关概念。
\subsection{函数调用的形式}
\subsection{函数调用时数据传递}
\begin{enumerate}
	\item 形式参数和实际参数
	\item 实参和形参间的数据传递
\end{enumerate}
\subsection{函数调用的过程}
\subsection{函数的返回值}

\section{对被调用函数的声明和函数原型}
\section{函数的嵌套调用}
\section{函数的递归调用}
\section{数组作为函数参数}
\subsection{数组元素作为函数实参}
\subsection{数组名作函数参数}
\subsection{多维数组名作函数参数}
\section{局部变量和全局变量}
\subsection{局部变量}
\subsection{全局变量}
\section{变量的存储方式和生存期}
\subsection{动态存储方式与静态存储方式}
\subsection{局部变量的存储类别}
\subsection{全局变量的存储类别}
\section{关于变量的声明和定义}
\section{内部函数和外部函数}

